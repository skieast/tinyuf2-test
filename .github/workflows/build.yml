name: Build

on:
  pull_request:
  push:
  repository_dispatch:
  release:
    types:
      - created

jobs:
  ESP32-S2:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
        - 'espressif_kaluga_1'
        - 'espressif_saola_1_wroom'
        - 'espressif_saola_1_wrover'
        - 'microdev_micro_s2'
        - 'unexpectedmaker_feathers2'
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'
        fetch-depth: 0

    - uses: actions/cache@v1
      name: Fetch IDF tool cache
      id: idf-cache
      with:
        path: ${{ github.workspace }}/.idf_tools
        key: ${{ runner.os }}-idf-tools-${{ hashFiles('.git/modules/lib/esp-idf/HEAD') }}-20200801

    - name: Clone IDF submodules
      run: |
        (cd $IDF_PATH && git submodule update --init)
      env:
        IDF_PATH: ${{ github.workspace }}/lib/esp-idf

    - name: Install IDF tools
      run: |
        $IDF_PATH/tools/idf_tools.py --non-interactive install required
        $IDF_PATH/tools/idf_tools.py --non-interactive install cmake
        $IDF_PATH/tools/idf_tools.py --non-interactive install-python-env
        rm -rf $IDF_TOOLS_PATH/dist
      env:
        IDF_PATH: ${{ github.workspace }}/lib/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools

    - name: Build
      run: |
        source $IDF_PATH/export.sh
        make -C ports/esp32s2/ BOARD=${{ matrix.board }}
      env:
        IDF_PATH: ${{ github.workspace }}/lib/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools

    #- name: Build
    #  run: docker run --rm -v $PWD:/project -w /project/ports/esp32s2 espressif/idf:latest idf.py build -DBOARD=${{ matrix.board }}

    #- name: Rename release artifact
    #  run: cp build/uf2-esp32s.bin uf2-${{ matrix.board }}-${{ github.event.release.tag_name }}.bin
    #  if: ${{ github.event_name == 'release' }}

    #- name: Rename artifact
    #  run: cp ports/esp32s2/build/uf2-esp32s.bin uf2-${{ matrix.board }}-$(git describe --always).bin

    #- name: List files
    #  run: ls -a

    #- uses: actions/upload-artifact@v2
    #  with:
    #    name: ${{ matrix.board }}
    #    path: uf2-${{ matrix.board }}-*.bin

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./uf2-${{ matrix.board }}-${{ github.event.release.tag_name }}.bin
        asset_name: uf2-${{ matrix.board }}-${{ github.event.release.tag_name }}.bin
        asset_content_type: application/octet-stream
      if: ${{ github.event_name == 'release' }}

  ARM:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        port:
        - 'mimxrt10xx'
        - 'stm32f4'

    steps:
    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Install Toolchains
      run: |
        npm install --global xpm
        # 9.3.1-1.1.1 is official ARM 9-2020-q2-update.
        # Skip 1.2.1, 1.3.1 since they are xpack modified one
        xpm install --global @xpack-dev-tools/arm-none-eabi-gcc@9.3.1-1.1.1
        echo `echo $HOME/opt/xPacks/@xpack-dev-tools/arm-none-eabi-gcc/*/.content/bin` >> $GITHUB_PATH

    - name: Build
      run: python3 ports/build_all.py ${{ matrix.port }}
